heat_template_version: 2014-10-16
parameters:
  image_id:
    type: string
  instance_type: 
    type: string
  key_name: 
    type: string
  network_name: 
    type: string
  db_root_password:
    type: string
  db_name: 
    type: string
  db_username: 
    type: string
  db_password: 
    type: string

    
resources:
  DatabaseServer:
    type: OS::Nova::Server
    properties:
      image: { get_param: image_id }
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      networks:
        - network: { get_param: network_name }
      user_data_format: RAW
      user_data:
        get_resource: software-init      

  software-init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: { get_resource: DBInstall }
        - config: { get_resource: DBSetup }
      
  DBInstall:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        merge_how: 'dict(recurse_array,no_replace)+list(append)'
        packages:
          - mariadb-server
          
  DBSetup:
    type: OS::Heat::SoftwareConfig
    depends_on: DBInstall
    properties:
      config: 
        str_replace: 
          template: |
            #!/bin/bash
            # Setup MySQL root password and create a user
            mysqladmin -u root password db_rootpassword
            cat << EOF | mysql -u root --password=db_rootpassword
            CREATE DATABASE db_name;
            GRANT ALL PRIVILEGES ON db_name.* TO "db_user"@"%"
            IDENTIFIED BY "db_password";
            FLUSH PRIVILEGES;
            EXIT
            EOF
            sed -e '/bind-address/ s/^#*/#/' -i /etc/mysql/my.cnf
            sed -e '/skip-networking/ s/^#*/#/' -i /etc/mysql/my.cnf
            service mysql restart
          params:
            db_rootpassword: { get_param: db_root_password }
            db_name: { get_param: db_name }
            db_user: { get_param: db_username }
            db_password: { get_param: db_password }
outputs:
  ip_address:
    description: IP Address of the DB Instance
    value: { get_attr: [DatabaseServer, addresses, { get_param: network_name }, 0, addr] } 
